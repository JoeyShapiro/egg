program = { SOI ~ statement* ~ EOI }
statement = { assignment | for_statement | expression }
assignment = { identifier ~ "=" ~ expression }
call = ${ identifier ~ ( " " ~ ( identifier | expression ) )+ }
for_statement = { "for" ~ identifier ~ for_mutator ~ expression ~ ("by" ~ expression)? ~ block }
for_mutator = { "in" | "of" }
block = { "{" ~ statement* ~ "}" }

expression = { function | array | string | binary_operation | number | identifier }
array = { "[" ~ (expression ~ (expression)*)? ~ "]" }
binary_operation = { term ~ (binary_operator ~ term)+ }
term = { call | array | string | number | identifier | "(" ~ expression ~ ")" }
binary_operator = { 
    "==" | "!=" | "<" | "<=" | ">" | ">=" | // comparison
    "&&" | "||" | "and" | "or" | // logical
    "%" | "**" | "@" | "|>" | "??" | // advanced arithmetic ???
    ".&" | ".|" | ".^" | // bytewise bitwise
    "&" | "|" | "^" | // bitwise
    "+" | "-" | "*" | "/" // basic arithmetic
}
// unary_operator = { "!" | "not" | "++" }
// this is actually handled by binary_operator
// ternary_operation = { expression ~ "<" ~ expression ~ "<" ~ expression }
function = { "func" ~ "("  ~ (identifier ~ ("," ~ identifier)*)? ~ ")" ~ block }

string = ${ "\"" ~ inner_string ~ "\"" }
inner_string = @{ char* }
char = {
    !("\"" | "\\") ~ ANY
    | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
    | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}
number = @{ ASCII_DIGIT+ ~ ("b"~ASCII_DIGIT+)? }
identifier = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }

COMMENT = _{ 
    "//" ~ (!NEWLINE ~ ANY)* ~ NEWLINE    // Single-line comment
    | "/*" ~ (!"*/" ~ ANY)* ~ "*/"        // Multi-line comment
}

WHITESPACE = _{ 
    " " 
    | "\t" 
    | NEWLINE 
    | COMMENT 
}

NEWLINE = _{ "\r" | "\n" | "\r\n" }
